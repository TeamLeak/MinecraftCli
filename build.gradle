plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
}

mainClassName = "com.github.leanfe.Application"
applicationDefaultJvmArgs = [
        "--add-exports", "java.base/sun.security.util=ALL-UNNAMED",
        "--add-exports", "jdk.naming.dns/com.sun.jndi.dns=java.naming",
        "--add-opens", "java.base/java.net=ALL-UNNAMED",
        "--add-opens", "java.base/java.util.jar=ALL-UNNAMED",
        "-XX:+IgnoreUnrecognizedVMOptions",
        '-Djdk.attach.allowAttachSelf=true'
]

tasks.withType(JavaCompile).configureEach {
    options.release = 16
}

group 'com.github.leanfe'
version '1.0-SNAPSHOT'

def winDir = 'win32-x86-64'
def linuxDir = 'linux-x86-64' // Replace with the correct directory name
def macDir = 'macos-x86-64' // Replace with the correct directory name

ext {
    // Default values for custom attributes
    implementationTitle = 'FML Launcher'
    implementationVersion = '36.2'
    implementationVendor = 'Forge'

    specificationTitle = 'Launcher'
    specificationVersion = '4.0'
    specificationVendor = 'Forge Development LLC'
}

println "Implementation-Title: ${implementationTitle}"
println "Specification-Version: ${specificationVersion}"
println "Implementation-Version: ${implementationVersion}"
println "Specification-Title: ${specificationTitle}"

jar {
    manifest {
        attributes(
                'Main-Class': "${application.mainClass}",
                'Implementation-Title': implementationTitle,
                'Implementation-Version': implementationVersion,
                'Implementation-Vendor': implementationVendor,

                'Specification-Title': specificationTitle,
                'Specification-Version': specificationVersion,
                'Specification-Vendor': specificationVendor,
                'Add-Exports': 'java.base/sun.security.util=ALL-UNNAMED,java.base/java.net=ALL-UNNAMED,java.base/java.util.jar=ALL-UNNAMED,jdk.naming.dns/com.sun.jndi.dns=java.naming',
                'Add-Opens': 'java.base/sun.security.util=ALL-UNNAMED,java.base/java.net=ALL-UNNAMED,java.base/java.util.jar=ALL-UNNAMED',
                'Multi-Release': 'true',
        )
    }
}

// Define the platform-dependent resource directories
sourceSets {
    main {
        resources {
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                srcDirs "src/main/resources/$winDir"
            } else if (System.getProperty("os.name").toLowerCase().contains("linux")) {
                srcDirs "src/main/resources/$linuxDir"
            } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                srcDirs "src/main/resources/$macDir"
            } else {
                srcDirs "src/main/resources"
            }
        }
    }
}

// Copy the native files to the platform-dependent resource directory
tasks.register('copyNatives', Copy) {
    from 'natives'
    if (System.getProperty("os.name").toLowerCase().contains("win")) {
        into "src/main/resources/$winDir"
    } else if (System.getProperty("os.name").toLowerCase().contains("linux")) {
        into "src/main/resources/$linuxDir"
    } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        into "src/main/resources/$macDir"
    } else {
        into 'src/main/resources'
    }
}

shadowJar {
    dependsOn copyNatives
}

dependencies {
    implementation files("Tools/tools-1.5.0.jar")

    implementation fileTree(include: ['*.jar'], dir: 'libraries')
    implementation fileTree(include: ['*.jar'], dir: 'version')
    implementation fileTree(include: ['*'], dir: 'META-INF')
    implementation fileTree(include: ['*.dll'], dir: 'natives')

}
